package cimeroEditor.standardGeneration;

import com.bull.cimero.pluginEditor.generator.serviceMixGenerator.model.standardModel.*;
import com.bull.cimero.pluginEditor.generator.serviceMixGenerator.model.global.*;
import com.bull.cimero.pluginEditor.generator.serviceMixGenerator.model.global.standardJBIClassImplementation.*;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;

public class StandardLW
{
  protected static String nl;
  public static synchronized StandardLW create(String lineSeparator)
  {
    nl = lineSeparator;
    StandardLW result = new StandardLW();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + NL + "" + NL + "<!--" + NL + "############################################################" + NL + "    Generated by CimeroEditor" + NL + " \tBull S. A. S., Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois" + NL + "############################################################" + NL + "-->" + NL + "" + NL + "" + NL + "<beans ";
  protected final String TEXT_2 = "xmlns:";
  protected final String TEXT_3 = "=\"";
  protected final String TEXT_4 = "\"" + NL + "\t\t\t";
  protected final String TEXT_5 = ">" + NL + "" + NL + "<classpath>" + NL + "\t<location>.</location>" + NL + "</classpath>" + NL;
  protected final String TEXT_6 = NL + "<";
  protected final String TEXT_7 = ":serviceunit id=\"jbi\">" + NL + "\t<";
  protected final String TEXT_8 = ":activationSpecs>" + NL + "\t\t";
  protected final String TEXT_9 = NL + "    <!-- ####################### ";
  protected final String TEXT_10 = " ######################## -->" + NL + "    <";
  protected final String TEXT_11 = ":activationSpec componentName=\"";
  protected final String TEXT_12 = "\" service=\"";
  protected final String TEXT_13 = ":";
  protected final String TEXT_14 = "\"";
  protected final String TEXT_15 = NL + "\t  destinationService=\"";
  protected final String TEXT_16 = ":";
  protected final String TEXT_17 = "\"";
  protected final String TEXT_18 = ">" + NL + "  \t";
  protected final String TEXT_19 = "  <";
  protected final String TEXT_20 = ":component>";
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = "\t   <bean ";
  protected final String TEXT_23 = " xmlns=\"";
  protected final String TEXT_24 = "\"" + NL + "\t   \t\t";
  protected final String TEXT_25 = "class=\"";
  protected final String TEXT_26 = "\">" + NL;
  protected final String TEXT_27 = "           <property name=\"";
  protected final String TEXT_28 = "\"";
  protected final String TEXT_29 = "  value=\"";
  protected final String TEXT_30 = "\" />" + NL;
  protected final String TEXT_31 = ">" + NL + "\t\t\t\t\t<list>";
  protected final String TEXT_32 = NL + "\t\t\t\t\t\t<value>";
  protected final String TEXT_33 = "</value>";
  protected final String TEXT_34 = NL + "\t\t\t\t\t</list>" + NL + "\t\t\t </property>" + NL;
  protected final String TEXT_35 = "\t\t\t <property name=\"";
  protected final String TEXT_36 = "\">" + NL + "\t\t\t\t<map>" + NL + "\t\t\t\t\t<entry>";
  protected final String TEXT_37 = NL + "\t\t\t\t\t\t<key>" + NL + "\t\t\t\t\t\t\t<bean class=\"";
  protected final String TEXT_38 = "\">" + NL;
  protected final String TEXT_39 = "           \t\t\t\t\t\t<property name=\"";
  protected final String TEXT_40 = "\"";
  protected final String TEXT_41 = "  value=\"";
  protected final String TEXT_42 = "\" />" + NL;
  protected final String TEXT_43 = ">" + NL + "\t\t\t\t\t\t\t\t\t\t<list>";
  protected final String TEXT_44 = NL + "\t\t\t\t\t\t\t\t\t\t\t<value>";
  protected final String TEXT_45 = "</value>";
  protected final String TEXT_46 = NL + "\t\t\t\t\t\t\t\t\t\t</list>" + NL + "\t\t\t\t\t\t\t\t\t</property>";
  protected final String TEXT_47 = "\t\t\t\t\t\t\t</bean>" + NL + "\t\t\t\t\t\t</key>" + NL + "\t\t\t\t\t\t<bean class=\"";
  protected final String TEXT_48 = "\">" + NL;
  protected final String TEXT_49 = "           \t\t\t\t\t\t<property name=\"";
  protected final String TEXT_50 = "\"";
  protected final String TEXT_51 = "  value=\"";
  protected final String TEXT_52 = "\" />" + NL;
  protected final String TEXT_53 = ">" + NL + "\t\t\t\t\t\t\t\t\t\t<list>";
  protected final String TEXT_54 = NL + "\t\t\t\t\t\t\t\t\t\t\t<value>";
  protected final String TEXT_55 = "</value>";
  protected final String TEXT_56 = NL + "\t\t\t\t\t\t\t\t\t\t</list>" + NL + "\t\t\t\t\t\t\t\t\t</property>";
  protected final String TEXT_57 = "\t\t\t\t\t\t</bean>";
  protected final String TEXT_58 = NL + "\t\t\t\t\t</entry>" + NL + "\t\t\t\t</map>" + NL + "\t\t\t </property>" + NL;
  protected final String TEXT_59 = "\t\t\t <property name=\"";
  protected final String TEXT_60 = "\">" + NL;
  protected final String TEXT_61 = " ";
  protected final String TEXT_62 = "<bean class=\"";
  protected final String TEXT_63 = "\">" + NL;
  protected final String TEXT_64 = " ";
  protected final String TEXT_65 = "   <constructor-arg value=\"";
  protected final String TEXT_66 = "\" />" + NL;
  protected final String TEXT_67 = " ";
  protected final String TEXT_68 = "</bean>" + NL;
  protected final String TEXT_69 = "                 <bean ";
  protected final String TEXT_70 = " xmlns=\"";
  protected final String TEXT_71 = "\"" + NL + "\t\t\t\t   \t\t";
  protected final String TEXT_72 = "class=\"";
  protected final String TEXT_73 = "\">" + NL;
  protected final String TEXT_74 = "\t\t\t\t      <property name=\"";
  protected final String TEXT_75 = "\"";
  protected final String TEXT_76 = "  value=\"";
  protected final String TEXT_77 = "\" />";
  protected final String TEXT_78 = ">" + NL + "\t\t\t\t\t\t\t\t<list>";
  protected final String TEXT_79 = NL + "\t\t\t\t\t\t\t\t\t  <value>";
  protected final String TEXT_80 = "</value>";
  protected final String TEXT_81 = "</list>" + NL + "\t\t\t\t\t\t</property>";
  protected final String TEXT_82 = ">";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = " ";
  protected final String TEXT_85 = "<bean class=\"";
  protected final String TEXT_86 = "\">" + NL;
  protected final String TEXT_87 = " ";
  protected final String TEXT_88 = "   <constructor-arg value=\"";
  protected final String TEXT_89 = "\" />" + NL;
  protected final String TEXT_90 = " ";
  protected final String TEXT_91 = "</bean>" + NL + "\t\t\t\t\t </property>";
  protected final String TEXT_92 = NL;
  protected final String TEXT_93 = "\t\t\t\t  </bean>" + NL;
  protected final String TEXT_94 = "\t\t\t</property>" + NL;
  protected final String TEXT_95 = "       </bean>";
  protected final String TEXT_96 = NL;
  protected final String TEXT_97 = "\t\t<";
  protected final String TEXT_98 = ":component>" + NL + "\t\t\t<";
  protected final String TEXT_99 = ":endpoints>" + NL;
  protected final String TEXT_100 = " ";
  protected final String TEXT_101 = " ";
  protected final String TEXT_102 = "\t\t\t\t<";
  protected final String TEXT_103 = ":endpoint" + NL + "\t\t\t\t\tdefaultMep=\"";
  protected final String TEXT_104 = "\"" + NL + "\t\t\t\t\tservice=\"";
  protected final String TEXT_105 = ":";
  protected final String TEXT_106 = "\"" + NL + "\t\t\t\t\tendpoint=\"";
  protected final String TEXT_107 = "\"" + NL + "\t\t\t\t\trole=\"";
  protected final String TEXT_108 = "\"" + NL + "\t\t\t\t\tlocationURI=\"";
  protected final String TEXT_109 = "\"" + NL + "\t\t\t\t\tsoap=\"";
  protected final String TEXT_110 = "true";
  protected final String TEXT_111 = "false";
  protected final String TEXT_112 = "\">" + NL + "\t\t\t\t</";
  protected final String TEXT_113 = ":endpoint>";
  protected final String TEXT_114 = " ";
  protected final String TEXT_115 = "\t\t\t\t<";
  protected final String TEXT_116 = ":wire-tap service=\"";
  protected final String TEXT_117 = ":";
  protected final String TEXT_118 = "\" endpoint=\"";
  protected final String TEXT_119 = "\">" + NL + "\t\t\t\t\t<";
  protected final String TEXT_120 = ":target>" + NL + "\t\t\t\t\t\t<";
  protected final String TEXT_121 = ":exchange-target service=\"";
  protected final String TEXT_122 = ":";
  protected final String TEXT_123 = "\"/>" + NL + "\t\t\t\t\t</";
  protected final String TEXT_124 = ":target>" + NL + "\t\t\t\t\t<";
  protected final String TEXT_125 = ":inListener>" + NL + "\t\t\t\t\t\t<";
  protected final String TEXT_126 = ":exchange-target service=\"";
  protected final String TEXT_127 = ":";
  protected final String TEXT_128 = "\"/>" + NL + "\t\t\t\t\t</";
  protected final String TEXT_129 = ":inListener>" + NL + "\t\t\t\t</";
  protected final String TEXT_130 = ":wire-tap>";
  protected final String TEXT_131 = " ";
  protected final String TEXT_132 = "\t\t\t\t<";
  protected final String TEXT_133 = ":pipeline service=\"";
  protected final String TEXT_134 = ":";
  protected final String TEXT_135 = "\" endpoint=\"";
  protected final String TEXT_136 = "\">" + NL + "\t\t\t\t\t<";
  protected final String TEXT_137 = ":transformer>" + NL + "\t\t\t\t\t\t<";
  protected final String TEXT_138 = ":exchange-target service=\"";
  protected final String TEXT_139 = ":";
  protected final String TEXT_140 = "\"/>" + NL + "\t\t\t\t\t</";
  protected final String TEXT_141 = ":transformer>" + NL + "\t\t\t\t\t<";
  protected final String TEXT_142 = ":target>" + NL + "\t\t\t\t\t\t<";
  protected final String TEXT_143 = ":exchange-target service=\"";
  protected final String TEXT_144 = ":";
  protected final String TEXT_145 = "\"/>" + NL + "\t\t\t\t\t</";
  protected final String TEXT_146 = ":target>" + NL + "\t\t\t\t</";
  protected final String TEXT_147 = ":pipeline>";
  protected final String TEXT_148 = " ";
  protected final String TEXT_149 = "\t\t\t\t<";
  protected final String TEXT_150 = ":xpath-splitter service=\"";
  protected final String TEXT_151 = ":";
  protected final String TEXT_152 = "\" endpoint=\"";
  protected final String TEXT_153 = "\"" + NL + "\t\t\t\t\txpath=\"";
  protected final String TEXT_154 = "\">" + NL + "\t\t\t\t\t<";
  protected final String TEXT_155 = ":target>" + NL + "\t\t\t\t\t\t<";
  protected final String TEXT_156 = ":exchange-target service=\"";
  protected final String TEXT_157 = ":";
  protected final String TEXT_158 = "\"/>" + NL + "\t\t\t\t\t</";
  protected final String TEXT_159 = ":target>" + NL + "\t\t\t\t</";
  protected final String TEXT_160 = ":xpath-splitter>";
  protected final String TEXT_161 = " ";
  protected final String TEXT_162 = "\t\t\t\t<";
  protected final String TEXT_163 = ":split-aggregator service=\"";
  protected final String TEXT_164 = ":";
  protected final String TEXT_165 = "\" endpoint=\"";
  protected final String TEXT_166 = "\">" + NL + "\t\t\t\t\t<";
  protected final String TEXT_167 = ":target>" + NL + "\t\t\t\t\t\t<";
  protected final String TEXT_168 = ":exchange-target service=\"";
  protected final String TEXT_169 = ":";
  protected final String TEXT_170 = "\"/>" + NL + "\t\t\t\t\t</";
  protected final String TEXT_171 = ":target>" + NL + "\t\t\t\t</";
  protected final String TEXT_172 = ":split-aggregator>";
  protected final String TEXT_173 = " ";
  protected final String TEXT_174 = "\t\t\t\t<";
  protected final String TEXT_175 = ":endpoint" + NL + "\t\t\t\t\tservice=\"";
  protected final String TEXT_176 = ":";
  protected final String TEXT_177 = "\"" + NL + "\t\t\t\t\tendpoint=\"";
  protected final String TEXT_178 = "\"" + NL;
  protected final String TEXT_179 = "\t\t\t\t\ttargetService=\"";
  protected final String TEXT_180 = ":";
  protected final String TEXT_181 = "\"" + NL + "\t\t\t\t\ttargetEndpoint=\"";
  protected final String TEXT_182 = "\"" + NL;
  protected final String TEXT_183 = "\t\t\t\t\trole=\"";
  protected final String TEXT_184 = "\"" + NL + "\t\t\t\t\tdefaultMep=\"";
  protected final String TEXT_185 = "\"" + NL + "\t\t\t\t\tdestinationStyle=\"";
  protected final String TEXT_186 = "\"" + NL + "\t\t\t\t\tjmsProviderDestinationName=\"";
  protected final String TEXT_187 = "\"" + NL + "\t\t\t\t\tjndiConnectionFactoryName=\"";
  protected final String TEXT_188 = "\">" + NL + "\t\t\t\t</";
  protected final String TEXT_189 = ":endpoint>";
  protected final String TEXT_190 = " ";
  protected final String TEXT_191 = "\t\t\t\t<";
  protected final String TEXT_192 = ":message-filter service=\"";
  protected final String TEXT_193 = ":";
  protected final String TEXT_194 = "\" endpoint=\"";
  protected final String TEXT_195 = "\">" + NL + "\t\t\t\t\t<";
  protected final String TEXT_196 = ":target>" + NL + "\t\t\t\t\t\t<";
  protected final String TEXT_197 = ":exchange-target service=\"";
  protected final String TEXT_198 = ":";
  protected final String TEXT_199 = "\"/>" + NL + "\t\t\t\t\t</";
  protected final String TEXT_200 = ":target>" + NL + "\t\t\t\t\t<";
  protected final String TEXT_201 = ":filter>" + NL + "\t\t\t\t\t\t<";
  protected final String TEXT_202 = ":xpath-predicate xpath=\"";
  protected final String TEXT_203 = "\"/>" + NL + "\t\t\t\t    </";
  protected final String TEXT_204 = ":filter>" + NL + "\t\t\t\t</";
  protected final String TEXT_205 = ":message-filter>" + NL;
  protected final String TEXT_206 = NL + "\t\t\t</";
  protected final String TEXT_207 = ":endpoints>" + NL + "\t\t</";
  protected final String TEXT_208 = ":component>";
  protected final String TEXT_209 = NL + "      </";
  protected final String TEXT_210 = ":component>" + NL + "    </";
  protected final String TEXT_211 = ":activationSpec>" + NL + "\t\t";
  protected final String TEXT_212 = NL + "\t</";
  protected final String TEXT_213 = ":activationSpecs>" + NL + "</";
  protected final String TEXT_214 = ":serviceunit>" + NL + "</beans>";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     StandardLWComponentClass monStdLW = (StandardLWComponentClass) argument;
    stringBuffer.append(TEXT_1);
    
		for (int i = 0; i < monStdLW.getNamespaceLst().size(); i++) {
			NameSpaceClass nms = (NameSpaceClass) monStdLW.getNamespaceLst().get(i);
			
    stringBuffer.append(TEXT_2);
    stringBuffer.append(nms.getNameSpaceName());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(nms.getNameSpaceValue());
    stringBuffer.append(TEXT_4);
       	}

    stringBuffer.append(TEXT_5);
    NameSpaceClass nms = monStdLW.getCurrentNms();
    stringBuffer.append(TEXT_6);
    stringBuffer.append(nms.getNameSpaceName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(nms.getNameSpaceName());
    stringBuffer.append(TEXT_8);
    for (int i = 0; i < monStdLW.getActivationSpecLst().size(); i++) {
				ActivationSpecClass myActi = (ActivationSpecClass) monStdLW.getActivationSpecLst().get(i);
		
     String actiNmsName = myActi.getNameSpaceRef().getNameSpaceName();
  
    stringBuffer.append(TEXT_9);
    stringBuffer.append(myActi.getComponentName());
    stringBuffer.append(TEXT_10);
    stringBuffer.append(actiNmsName);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(myActi.getComponentName());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(myActi.getServiceNameSpace().getNameSpaceName());
    stringBuffer.append(TEXT_13);
    stringBuffer.append(myActi.getServiceName());
    stringBuffer.append(TEXT_14);
    
    if (myActi.getDestinationServiceName().compareTo("") != 0 ) {
	  //add the destination service name
	  
    stringBuffer.append(TEXT_15);
    stringBuffer.append(myActi.getDestinationServiceNameSpace().getNameSpaceName());
    stringBuffer.append(TEXT_16);
    stringBuffer.append(myActi.getDestinationServiceName());
    stringBuffer.append(TEXT_17);
    
    }
    ComponentClass monCompo = (ComponentClass) myActi.getComponent();
    
    stringBuffer.append(TEXT_18);
     String compoNmsName = monCompo.getNamespaceComponentRef().getNameSpaceName();
    
    stringBuffer.append(TEXT_19);
    stringBuffer.append(compoNmsName);
    stringBuffer.append(TEXT_20);
    
    //look of this is a bean or a standard compo
  	if (monCompo.isBeanClass()) {
  		//call the bean element
		LWBeanClass myBean = (LWBeanClass) monCompo.getMonBean();
		
    stringBuffer.append(TEXT_21);
    stringBuffer.append(TEXT_22);
    
	   	if (myBean.getXmlnsValue().compareTo("") != 0) {
	   		
    stringBuffer.append(TEXT_23);
    stringBuffer.append(myBean.getXmlnsValue());
    stringBuffer.append(TEXT_24);
    
	   }
	   
    stringBuffer.append(TEXT_25);
    stringBuffer.append(myBean.getClassName());
    stringBuffer.append(TEXT_26);
     			for (int cpt = 0; cpt < myBean.getlstProp().size(); cpt++) {
      			PropertyClass myProp = (PropertyClass) myBean.getlstProp().get(cpt);
				//if bean -> property -> value
				if (myProp.isValue()) {

    stringBuffer.append(TEXT_27);
    stringBuffer.append(myProp.getPropertyName());
    stringBuffer.append(TEXT_28);
    
					List lstValue = myProp.getLstValue();
					if (lstValue.size() == 1) {
						
    stringBuffer.append(TEXT_29);
    stringBuffer.append(lstValue.get(0));
    stringBuffer.append(TEXT_30);
    
					} else {
						
    stringBuffer.append(TEXT_31);
    
								for (int u = 0; u < lstValue.size(); u++) {
    stringBuffer.append(TEXT_32);
    stringBuffer.append(lstValue.get(u));
    stringBuffer.append(TEXT_33);
    
								}
							
    stringBuffer.append(TEXT_34);
    
					}
				} else {
					//test if it is a map
					if (myProp.isMap()) {

    stringBuffer.append(TEXT_35);
    stringBuffer.append(myProp.getPropertyName());
    stringBuffer.append(TEXT_36);
    					 Map myMap = myProp.getLWMap();
					Set keys = myMap.keySet();
					Iterator ik = keys.iterator();
					while (ik.hasNext()) {
						//we get all the map element.
						Object key = ik.next();
						LWBeanClass beanKey = (LWBeanClass) key;
						LWBeanClass beanValue = (LWBeanClass) myMap.get(key);

    stringBuffer.append(TEXT_37);
    stringBuffer.append(beanKey.getClassName());
    stringBuffer.append(TEXT_38);
     							for (int cptMap = 0; cptMap < beanKey.getlstProp().size(); cptMap++) {
      							PropertyClass myPropMap = (PropertyClass) beanKey.getlstProp().get(cptMap);
								if (myPropMap.isValue()) {

    stringBuffer.append(TEXT_39);
    stringBuffer.append(myPropMap.getPropertyName());
    stringBuffer.append(TEXT_40);
    
									List lstValue = myPropMap.getLstValue();
									if (lstValue.size() == 1) {
										
    stringBuffer.append(TEXT_41);
    stringBuffer.append(lstValue.get(0));
    stringBuffer.append(TEXT_42);
    
									} else {
										
    stringBuffer.append(TEXT_43);
    
										for (int u = 0; u < lstValue.size(); u++) {
    stringBuffer.append(TEXT_44);
    stringBuffer.append(lstValue.get(u));
    stringBuffer.append(TEXT_45);
    
										}
										
    stringBuffer.append(TEXT_46);
    									}
			 					}
							}

    stringBuffer.append(TEXT_47);
    stringBuffer.append(beanValue.getClassName());
    stringBuffer.append(TEXT_48);
     							for (int cptMap = 0; cptMap < beanValue.getlstProp().size(); cptMap++) {
      							PropertyClass myPropMap = (PropertyClass) beanValue.getlstProp().get(cptMap);
								if (myPropMap.isValue()) {

    stringBuffer.append(TEXT_49);
    stringBuffer.append(myPropMap.getPropertyName());
    stringBuffer.append(TEXT_50);
    
									List lstValue = myPropMap.getLstValue();
									if (lstValue.size() == 1) {
										
    stringBuffer.append(TEXT_51);
    stringBuffer.append(lstValue.get(0));
    stringBuffer.append(TEXT_52);
    
									} else {
										
    stringBuffer.append(TEXT_53);
    
										for (int u = 0; u < lstValue.size(); u++) {
    stringBuffer.append(TEXT_54);
    stringBuffer.append(lstValue.get(u));
    stringBuffer.append(TEXT_55);
    
										}
										
    stringBuffer.append(TEXT_56);
    									}
			 					}
							}

    stringBuffer.append(TEXT_57);
    					}
    stringBuffer.append(TEXT_58);
    
					} else {

					LWBeanClass myBeanTmp = (LWBeanClass) myProp.getMyBean();

    stringBuffer.append(TEXT_59);
    stringBuffer.append(myProp.getPropertyName());
    stringBuffer.append(TEXT_60);
    
					if (!myBeanTmp.isProperty()) {
						//if bean -> property -> bean -> constructor
						LWBeanClass myBeanConstructor = myBeanTmp;
						int valEsp = 17;

     for (int compt = 0; compt < valEsp; compt++) {
    stringBuffer.append(TEXT_61);
    }
    stringBuffer.append(TEXT_62);
    stringBuffer.append(myBeanConstructor.getClassName());
    stringBuffer.append(TEXT_63);
     for (int compt = 0; compt < valEsp; compt++) {
    stringBuffer.append(TEXT_64);
    }
    stringBuffer.append(TEXT_65);
    stringBuffer.append(myBeanConstructor.getMyConstructor().getValue());
    stringBuffer.append(TEXT_66);
     for (int compt = 0; compt < valEsp; compt++) {
    stringBuffer.append(TEXT_67);
    }
    stringBuffer.append(TEXT_68);
    
					} else {

    stringBuffer.append(TEXT_69);
    
				   	if (myBeanTmp.getXmlnsValue().compareTo("") != 0) {
				   		
    stringBuffer.append(TEXT_70);
    stringBuffer.append(myBeanTmp.getXmlnsValue());
    stringBuffer.append(TEXT_71);
    
				   }
				   
    stringBuffer.append(TEXT_72);
    stringBuffer.append(myBeanTmp.getClassName());
    stringBuffer.append(TEXT_73);
       					for (int j = 0; j < myBeanTmp.getlstProp().size(); j++) {
							PropertyClass myPropTmp = (PropertyClass) myBeanTmp.getlstProp().get(j);

    stringBuffer.append(TEXT_74);
    stringBuffer.append(myPropTmp.getPropertyName());
    stringBuffer.append(TEXT_75);
    
							//we test if this property is a value or a bean
							if (myPropTmp.isValue()) {
								//if bean -> property -> bean -> property -> value
								//value
								List lstValue = myPropTmp.getLstValue();
								if (lstValue.size() == 1) {
									
    stringBuffer.append(TEXT_76);
    stringBuffer.append(lstValue.get(0));
    stringBuffer.append(TEXT_77);
    
								} else {
									
    stringBuffer.append(TEXT_78);
    
											for (int u = 0; u < lstValue.size(); u++) {
    stringBuffer.append(TEXT_79);
    stringBuffer.append(lstValue.get(u));
    stringBuffer.append(TEXT_80);
    
											}
							  
    stringBuffer.append(TEXT_81);
    
								}
							} else {
								//constructor
								//if bean -> property -> bean -> property -> bean -> constructor
								LWBeanClass myBeanConstructor = myPropTmp.getMyBean();
								int valEsp = 26;
								
    stringBuffer.append(TEXT_82);
    stringBuffer.append(TEXT_83);
     for (int compt = 0; compt < valEsp; compt++) {
    stringBuffer.append(TEXT_84);
    }
    stringBuffer.append(TEXT_85);
    stringBuffer.append(myBeanConstructor.getClassName());
    stringBuffer.append(TEXT_86);
     for (int compt = 0; compt < valEsp; compt++) {
    stringBuffer.append(TEXT_87);
    }
    stringBuffer.append(TEXT_88);
    stringBuffer.append(myBeanConstructor.getMyConstructor().getValue());
    stringBuffer.append(TEXT_89);
     for (int compt = 0; compt < valEsp; compt++) {
    stringBuffer.append(TEXT_90);
    }
    stringBuffer.append(TEXT_91);
    
							}

    stringBuffer.append(TEXT_92);
    
						}

    stringBuffer.append(TEXT_93);
    
					}

    stringBuffer.append(TEXT_94);
    
				   } //fin si map sinon
				} //fin else
			} //fin for

    stringBuffer.append(TEXT_95);
    
  	} else {
  		//call the standard compo element
	   StandardComponentClass monStdCompo = (StandardComponentClass) monCompo.getMonCompoStandard();
  		
    stringBuffer.append(TEXT_96);
    stringBuffer.append(TEXT_97);
    stringBuffer.append(monStdCompo.getNamespaceReference().getNameSpaceName());
    stringBuffer.append(TEXT_98);
    stringBuffer.append(monStdCompo.getNamespaceReference().getNameSpaceName());
    stringBuffer.append(TEXT_99);
    				StandardJBIClass myJBI = monStdCompo.getMyJBICompo();

    stringBuffer.append(TEXT_100);
     if (myJBI instanceof StandardHttpClass) {
					StandardHttpClass myHttp = (StandardHttpClass) myJBI;

    stringBuffer.append(TEXT_101);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(myHttp.getNamespaceRef().getNameSpaceName());
    stringBuffer.append(TEXT_103);
    stringBuffer.append(myHttp.getDefaultMepValue());
    stringBuffer.append(TEXT_104);
    stringBuffer.append(myHttp.getServiceNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_105);
    stringBuffer.append(myHttp.getServiceName());
    stringBuffer.append(TEXT_106);
    stringBuffer.append(myHttp.getEndpointValue());
    stringBuffer.append(TEXT_107);
    stringBuffer.append(myHttp.getProviderRole());
    stringBuffer.append(TEXT_108);
    stringBuffer.append(myHttp.getLocationURI());
    stringBuffer.append(TEXT_109);
    
					if (myHttp.isSoap()) {
						
    stringBuffer.append(TEXT_110);
    
					} else {
						
    stringBuffer.append(TEXT_111);
    
					}
    stringBuffer.append(TEXT_112);
    stringBuffer.append(myHttp.getNamespaceRef().getNameSpaceName());
    stringBuffer.append(TEXT_113);
    
				} else if (myJBI instanceof StandardEIPWireTap) {
					StandardEIPWireTap myWT = (StandardEIPWireTap) myJBI;

    stringBuffer.append(TEXT_114);
    			String nmsWTName = myWT.getNamespaceRef().getNameSpaceName();

    stringBuffer.append(TEXT_115);
    stringBuffer.append(nmsWTName);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(myWT.getServiceNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_117);
    stringBuffer.append(myWT.getServiceName());
    stringBuffer.append(TEXT_118);
    stringBuffer.append(myWT.getEndpointValue());
    stringBuffer.append(TEXT_119);
    stringBuffer.append(nmsWTName);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(nmsWTName);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(myWT.getTargetNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_122);
    stringBuffer.append(myWT.getTargetName());
    stringBuffer.append(TEXT_123);
    stringBuffer.append(nmsWTName);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(nmsWTName);
    stringBuffer.append(TEXT_125);
    stringBuffer.append(nmsWTName);
    stringBuffer.append(TEXT_126);
    stringBuffer.append(myWT.getListenerNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_127);
    stringBuffer.append(myWT.getListenerName());
    stringBuffer.append(TEXT_128);
    stringBuffer.append(nmsWTName);
    stringBuffer.append(TEXT_129);
    stringBuffer.append(nmsWTName);
    stringBuffer.append(TEXT_130);
    
				} else if (myJBI instanceof StandardEIPPipelineClass) {
					StandardEIPPipelineClass myPipeline = (StandardEIPPipelineClass) myJBI;

    stringBuffer.append(TEXT_131);
    			String nmsPipelineName = myPipeline.getNamespaceRef().getNameSpaceName();

    stringBuffer.append(TEXT_132);
    stringBuffer.append(nmsPipelineName);
    stringBuffer.append(TEXT_133);
    stringBuffer.append(myPipeline.getServiceNameSpace().getNameSpaceName());
    stringBuffer.append(TEXT_134);
    stringBuffer.append(myPipeline.getServiceName());
    stringBuffer.append(TEXT_135);
    stringBuffer.append(myPipeline.getEndpoint());
    stringBuffer.append(TEXT_136);
    stringBuffer.append(nmsPipelineName);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(nmsPipelineName);
    stringBuffer.append(TEXT_138);
    stringBuffer.append(myPipeline.getTrsfNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_139);
    stringBuffer.append(myPipeline.getTransformeurServiceName());
    stringBuffer.append(TEXT_140);
    stringBuffer.append(nmsPipelineName);
    stringBuffer.append(TEXT_141);
    stringBuffer.append(nmsPipelineName);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(nmsPipelineName);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(myPipeline.getTargetNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_144);
    stringBuffer.append(myPipeline.getTargetServiceName());
    stringBuffer.append(TEXT_145);
    stringBuffer.append(nmsPipelineName);
    stringBuffer.append(TEXT_146);
    stringBuffer.append(nmsPipelineName);
    stringBuffer.append(TEXT_147);
    
				} else if (myJBI instanceof StandardEIPSplitter) {
					StandardEIPSplitter mySplitter = (StandardEIPSplitter) myJBI;

    stringBuffer.append(TEXT_148);
    			String nmsSplitterName = mySplitter.getNamespaceRef().getNameSpaceName();

    stringBuffer.append(TEXT_149);
    stringBuffer.append(nmsSplitterName);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(mySplitter.getServiceNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_151);
    stringBuffer.append(mySplitter.getServiceName());
    stringBuffer.append(TEXT_152);
    stringBuffer.append(mySplitter.getEndpointValue());
    stringBuffer.append(TEXT_153);
    stringBuffer.append(mySplitter.getXPathRule());
    stringBuffer.append(TEXT_154);
    stringBuffer.append(nmsSplitterName);
    stringBuffer.append(TEXT_155);
    stringBuffer.append(nmsSplitterName);
    stringBuffer.append(TEXT_156);
    stringBuffer.append(mySplitter.getTargetNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_157);
    stringBuffer.append(mySplitter.getTargetName());
    stringBuffer.append(TEXT_158);
    stringBuffer.append(nmsSplitterName);
    stringBuffer.append(TEXT_159);
    stringBuffer.append(nmsSplitterName);
    stringBuffer.append(TEXT_160);
    
				} else if (myJBI instanceof StandardEIPAggregator) {
					StandardEIPAggregator myAggreg = (StandardEIPAggregator) myJBI;

    stringBuffer.append(TEXT_161);
    			String nmsAggregName = myAggreg.getNamespaceRef().getNameSpaceName();

    stringBuffer.append(TEXT_162);
    stringBuffer.append(nmsAggregName);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(myAggreg.getServiceNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_164);
    stringBuffer.append(myAggreg.getServiceName());
    stringBuffer.append(TEXT_165);
    stringBuffer.append(myAggreg.getEndpointValue());
    stringBuffer.append(TEXT_166);
    stringBuffer.append(nmsAggregName);
    stringBuffer.append(TEXT_167);
    stringBuffer.append(nmsAggregName);
    stringBuffer.append(TEXT_168);
    stringBuffer.append(myAggreg.getTargetNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_169);
    stringBuffer.append(myAggreg.getTargetName());
    stringBuffer.append(TEXT_170);
    stringBuffer.append(nmsAggregName);
    stringBuffer.append(TEXT_171);
    stringBuffer.append(nmsAggregName);
    stringBuffer.append(TEXT_172);
    
				} else if (myJBI instanceof StandardJMSClass) {
					StandardJMSClass myJMS = (StandardJMSClass) myJBI;

    stringBuffer.append(TEXT_173);
    stringBuffer.append(TEXT_174);
    stringBuffer.append(myJMS.getNamespaceRef().getNameSpaceName());
    stringBuffer.append(TEXT_175);
    stringBuffer.append(myJMS.getServiceNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_176);
    stringBuffer.append(myJMS.getServiceName());
    stringBuffer.append(TEXT_177);
    stringBuffer.append(myJMS.getEndpointValue());
    stringBuffer.append(TEXT_178);
    					if (myJMS.getTargetServiceName() != null) {

    stringBuffer.append(TEXT_179);
    stringBuffer.append(myJMS.getTargetServiceNms().getNameSpaceName());
    stringBuffer.append(TEXT_180);
    stringBuffer.append(myJMS.getTargetServiceName());
    stringBuffer.append(TEXT_181);
    stringBuffer.append(myJMS.getTargetServiceName());
    stringBuffer.append(TEXT_182);
    					}

    stringBuffer.append(TEXT_183);
    stringBuffer.append(myJMS.getRole());
    stringBuffer.append(TEXT_184);
    stringBuffer.append(myJMS.getDefaultMepValue());
    stringBuffer.append(TEXT_185);
    stringBuffer.append(myJMS.getDestinationStyle());
    stringBuffer.append(TEXT_186);
    stringBuffer.append(myJMS.getJMSProviderDestinationName());
    stringBuffer.append(TEXT_187);
    stringBuffer.append(myJMS.getJndiConnectionFactoryName());
    stringBuffer.append(TEXT_188);
    stringBuffer.append(myJMS.getNamespaceRef().getNameSpaceName());
    stringBuffer.append(TEXT_189);
    
				} else if (myJBI instanceof StandardEIPMessageFilter) {
					StandardEIPMessageFilter myMessageFilter = (StandardEIPMessageFilter) myJBI;

    stringBuffer.append(TEXT_190);
    			String nmsMessageFilterName = myMessageFilter.getNamespaceRef().getNameSpaceName();

    stringBuffer.append(TEXT_191);
    stringBuffer.append(nmsMessageFilterName);
    stringBuffer.append(TEXT_192);
    stringBuffer.append(myMessageFilter.getServiceNameSpace().getNameSpaceName());
    stringBuffer.append(TEXT_193);
    stringBuffer.append(myMessageFilter.getServiceName());
    stringBuffer.append(TEXT_194);
    stringBuffer.append(myMessageFilter.getEndpoint());
    stringBuffer.append(TEXT_195);
    stringBuffer.append(nmsMessageFilterName);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(nmsMessageFilterName);
    stringBuffer.append(TEXT_197);
    stringBuffer.append(myMessageFilter.getTargetNamespace().getNameSpaceName());
    stringBuffer.append(TEXT_198);
    stringBuffer.append(myMessageFilter.getTargetName());
    stringBuffer.append(TEXT_199);
    stringBuffer.append(nmsMessageFilterName);
    stringBuffer.append(TEXT_200);
    stringBuffer.append(nmsMessageFilterName);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(nmsMessageFilterName);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(myMessageFilter.getXpathRule());
    stringBuffer.append(TEXT_203);
    stringBuffer.append(nmsMessageFilterName);
    stringBuffer.append(TEXT_204);
    stringBuffer.append(nmsMessageFilterName);
    stringBuffer.append(TEXT_205);
    
					} 
    stringBuffer.append(TEXT_206);
    stringBuffer.append(monStdCompo.getNamespaceReference().getNameSpaceName());
    stringBuffer.append(TEXT_207);
    stringBuffer.append(monStdCompo.getNamespaceReference().getNameSpaceName());
    stringBuffer.append(TEXT_208);
    
  	} 
    stringBuffer.append(TEXT_209);
    stringBuffer.append(compoNmsName);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(actiNmsName);
    stringBuffer.append(TEXT_211);
     } 
    stringBuffer.append(TEXT_212);
    stringBuffer.append(nms.getNameSpaceName());
    stringBuffer.append(TEXT_213);
    stringBuffer.append(nms.getNameSpaceName());
    stringBuffer.append(TEXT_214);
    return stringBuffer.toString();
  }
}
